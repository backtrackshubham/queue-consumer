#!/usr/bin/env node

//var parseArgs = require('minimist');
var amqp = require('amqplib');
const meow = require('meow');

const cli = meow(`
  CLI queue consumer. Connects to a RabbitMQ queue and outputs
  messages as JSON to standard output.

  Usage
    $ consumer <options>

  Options
    Mandatory:
        -v, --vhost     RabbitMQ virtual host name
        -u, --user      Username
        -p, --password  Password
        -q, --queue     RabbitMQ queue name

    Optional:
        -h, --hostname  RabbitMQ hostname
        -o, --port      RabbitMQ port
        -a, --ack       Acknowledge messages and remove from queue
        -s, --nossl     Disable SSL handshake

  Examples
    $ consumer -v {VirtualHost} -u {UserName} -p {Password} -q {QueueName}
		
`, 
{
        flags: {
            vhost: {
            type: 'string',
            alias: 'v'
            },
            user: {
            type: 'string',
            alias: 'u'
            },
            password: {
            type: 'string',
            alias: 'p'
            },
            queue: {
            type: 'string',
            alias: 'q'
            },
            hostname: {
                type: 'string',
                alias: 'h',
                default : 'rabbitmq-us-east-1-production.hub.bitbrew.com'
            },
            port: {
                type: 'string',
                alias: 'o',
                default : '5671'
            },
            ack: {
                type: 'boolean',
                alias: 'a',
                default : false
            },
            nossl: {
                type: 'boolean',
                alias: 's',
                default : false
            },
            unknown : handleUnknown
        }
});

function validateArguments(args) {
    if(!(args.user && args.password && args.hostname && args.port
        && args.vhost && args.queue && ifValid(args))) {
        cli.showHelp(1);
    }

    return args;
}


function ifValid(args){
    return typeof args.user === 'string' && typeof args.password === 'string' && typeof args.hostname === 'string' && 
            typeof args.port === 'string' && typeof args.vhost === 'string' && typeof args.queue === 'string';
}

function handleUnknown(p) {
    console.dir(p);
    cli.showHelp(1);
}

function connect(args) {
    var connectionString = '';
   
    if (args.nossl === true) {
      connectionString = `amqp://${args.user}:${args.password}@${args.hostname}:${args.port}/${args.vhost}?heartbeat=30`
    } else {
      connectionString = `amqps://${args.user}:${args.password}@${args.hostname}:${args.port}/${args.vhost}?heartbeat=30`
    }

   var open = amqp.connect(connectionString);

    // Consumer
    open.then(function(conn) {
        var ok = conn.createChannel();
        conn.on('error', function(err) {
            if(err.message === 'Unexpected close') {
                console.log('Connection closed. Reconnecting...');
                connect(args);
            } else {
                console.log(err);
								connect(args);
            }
        });

        ok = ok.then(function(ch) {
            console.log('Connected.')
            ch.checkQueue(args.queue);
            ch.consume(args.queue, function(msg) {
                if (msg !== null) {
                    console.log(JSON.stringify(JSON.parse(msg.content), null, 4));

                    if (args.ack === true) {
                        ch.ack(msg);
                    }
                }
            });
        });
        return ok;
    })
}

connect(validateArguments(cli.flags));
